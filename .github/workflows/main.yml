name: iOS Robot Framework CI / CD Tests

on:
  workflow_dispatch:

env:
  CI_ENV: "ci"

jobs:
  run-robot-framework-appium-ios-tests:
    runs-on: macos-latest

    strategy:
      # Node version matrix
      matrix:
        node-version: [20]

    steps:
      # Step 1: Checkout the current repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Setup node
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      # Step 3: Check Node version
      - name: Verify Node Version
        run: node -v

      # Step 4: Check Npm version
      - name: Verify npm version
        run: npm -v

      # Step 5: Select Xcode version
      - name: Select Xcode Version
        run: sudo xcode-select -s /Applications/Xcode_16.1.app/Contents/Developer

      # Step 6: Authorize Xcode WebDriverAgent Permissions
      - name: Authorize Xcode WebDriverAgent Permissions
        run: | 
          sudo xcodebuild -license accept
          sudo chmod -R 777 /Applications/Xcode.app/Contents/Developer

      # Step 7: Ensure Xcode Command Line Tools are installed
      - name: Install Xcode Command Line Tools
        run: sudo xcode-select --install || echo "Command line tools already installed"
        
      # Step 8: Check Xcode version
      - name: Verify XCode Version
        run: /usr/bin/xcodebuild -version

      # Step 9: Install Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12' # Specify Python version

      # Step 10: Install Robot Framework, libraries and other dependencies
      - name: Install Python Dependencies For Robot Framework
        run: |
          python -m pip install --upgrade pip
          pip install robotframework
          pip install robotframework-appiumlibrary
          pip install robotframework-seleniumlibrary
          pip install Appium-Python-Client
          
      # Step 11: Install Appium
      - name: Install Appium
        run: |
          npm install -g appium
          npm install -g appium-doctor
          appium driver install xcuitest

      # Step 12: Clone repository
      - name: Clone Weather App Repository
        run: |
          git clone https://github.com/fmidev/weather-app.git
          echo "Repository cloned successfully"

      # Step 13: Install Yarn
      - name: Install Yarn
        run: yarn install --frozen-lockfile
        working-directory: weather-app

      # Step 14: Install Pods
      - name: Install Pods
        run: pod install
        working-directory: weather-app/ios

      # Step 15: Get defaultConfig
      - name: Get defaultConfig
        env:
          defaultConfig: ${{ secrets.DEFAULTCONFIG }}
        shell: bash
        run: |
          touch defaultConfig.ts
          echo "$defaultConfig" >> defaultConfig.ts
        working-directory: weather-app

      # Step 16: get Widgetconfig
      - name: Get widgetConfig
        env:
         widgetConfig: ${{ secrets.WIDGETCONFIG }}
        shell: bash
        run: |
         touch widgetConfig.json
         echo "$widgetConfig" >> widgetConfig.json
        working-directory: weather-app

      # Step 17: Check Installed iOS Runtimes
      - name: Check Installed iOS Runtimes
        run: xcrun simctl list runtimes

      # Step 18: List Available Simulators
      - name: List available Simulators
        run: xcrun simctl list devices

      # Step 19: Boot iPhone Simulator and get UDID
      - name: Boot iPhone Simulator
        id: boot_simulator
        run: |
          xcrun simctl shutdown all
          sleep 5
          UDID=$(xcrun simctl list devices available | grep 'iPhone 15 Pro' | awk -F '[()]' '{print $2}' | head -n 1)
          echo "Simulator UDID: $UDID"
          xcrun simctl boot "$UDID" || echo "Failed to boot simulator"
          echo "UDID=$UDID" >> $GITHUB_ENV

      # Step 20: Extract Phone Name and iOS Version for UDID
      - name: Extract Phone Name and iOS Version for UDID
        id: extract_device_info
        run: |
          DEVICE_INFO=$(xcrun simctl list devices | grep "$UDID")
          DEVICE_NAME=$(echo "$DEVICE_INFO" | awk -F ' \\(' '{print $1}' | xargs)
          IOS_VERSION=$(xcrun simctl list devices | awk -v udid="$UDID" ' /^-- iOS/ { ios_version=$3 } $0 ~ udid { print ios_version }')
          echo "Simulator DEVICE_NAME: $DEVICE_NAME"
          echo "Simulator IOS_VERSION: $IOS_VERSION"
          echo "DEVICE_NAME=$DEVICE_NAME" >> $GITHUB_ENV
          echo "IOS_VERSION=$IOS_VERSION" >> $GITHUB_ENV

      # Step 21: Start Yarn
      - name: Start Yarn
        run: |
          yarn start &
          sleep 15
        working-directory: weather-app

      # Step 22: Build and Run React Native App on Simulator
      - name: Build and Run React Native App on Simulator
        run: export CODE_SIGNING_REQUIRED=NO |
             export CODE_SIGNING_ALLOWED=NO |
             npx react-native run-ios --udid="$UDID"
        working-directory: weather-app

      # Step 23: Verify Running Simulator Status
      - name: Verify Simulator Status
        run: xcrun simctl list devices

      # Step 24: Start Appium Server in the Background
      - name: Start Appium Server
        run: |
          appium --base-path /wd/hub --address 127.0.0.1 --port 4723 --log-level info > appium.log 2>&1 &
          sleep 20

      # Step 25: Run Robot Framework tests
      - name: Run Robot Framework Tests
        run: |
          robot -d results tests/onboarding_tests.robot tests/weather_view_tests.robot
        continue-on-error: true

      # Step 26: Upload Robot Framework test results as artifacts
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: robot-test-results
          path: |
            ./results
            ./stdout
          retention-days: 2

      # Step 27: Upload Appium Logs
      - name: Upload Appium Logs
        uses: actions/upload-artifact@v3
        with:
          name: appium-logs
          path: appium.log
          retention-days: 2

      # Step 28: Stop Yarn
      - name: Stop Yarn Server
        run: |
          kill $(lsof -t -i:8081) || echo "Server already stopped"
